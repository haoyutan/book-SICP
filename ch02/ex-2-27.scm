(define (deep-reverse z)
  (if (not (list? z))
      z
      (let ((len (length z)))
        (cond ((= len 0) '())
              ((= len 1) (list (deep-reverse (car z))))
              ((> len 1) (append (deep-reverse (cdr z))
                                 (list (deep-reverse (car z)))))))))

(define (deep-reverse z)
  (if (not (list? z))
      z
      (let ((len (length z)))
        (cond ((= len 0) '())
              ((= len 1) (list (deep-reverse (car z))))
              ((> len 1) (append (deep-reverse (cdr z))
                                 (list (deep-reverse (car z)))))))))

(define (main-ex-2-27)
  (define x (list 1 (list 2 3 4) (list) (list 5 (list 6 7)) (list 8)))
  (display "x: ")
  (display x)
  (newline)
  (display "(reverse x):")
  (display (reverse x))
  (newline)
  (display "(deep-reverse x): ")
  (display (deep-reverse x))
  (newline))
