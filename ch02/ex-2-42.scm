(define (queens board-size)
  (define (queen-cols k)
    (if (= k 0)
        (list empty-board)
        (filter
          (lambda (positions) (safe? k positions))
          (append-map
            (lambda (rest-of-queens)
              (map (lambda (new-row)
                     (adjoin-position new-row k rest-of-queens))
                   (enumerate-interval 1 board-size)))
            (queen-cols (- k 1))))))
  (queen-cols board-size))

(define (enumerate-interval from to)
  (iota (+ (- to from) 1) from 1))

(define (adjoin-position new-row k rest-of-queens)
  (append rest-of-queens (list (list new-row k))))

(define empty-board '())

(define (safe? k positions) 
  (define (row pos) (first pos))
  (define (col pos) (second pos))
  (define (same? pos1 pos2)
    (and (= (row pos1) (row pos2))
         (= (col pos1) (col pos2))))
  (define (checked-by? me other)
    (let ((diff-row (abs (- (row me) (row other))))
          (diff-col (abs (- (col me) (col other)))))
         (or (= (row me) (row other))
             (= (col me) (col other))
             (= diff-row diff-col))))
  (let ((cur-pos (last positions)))
    (reduce (lambda (x y) (and x y))
            #t
            (map (lambda (pos)
                   (or (same? cur-pos pos)
                       (not (checked-by? cur-pos pos))))
                 positions))))
