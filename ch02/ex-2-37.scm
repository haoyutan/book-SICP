(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define nil '())

(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      nil
      (cons (accumulate op init (map car seqs))
            (accumulate-n op init (map cdr seqs)))))

(define (dot-product v w)
  (accumulate + 0 (map * v w)))

#! This is another version of matrix-*-vector. !#
(define (matrix-*-vector-old m v)
  (accumulate cons
              nil
              (map (lambda (row)
                     (dot-product row v))
                   m)))

(define (matrix-*-vector m v)
  (map (lambda (row) (dot-product row v)) m))

(define (transpose mat)
  (accumulate-n cons nil mat))

(define (matrix-*-matrix-v1 m n)
  (let ((cols (transpose n)))
    (map (lambda (row)
           (map (lambda (col)
                  (dot-product row col))
                cols))
         m)))

(define (matrix-*-matrix-v2 m n)
  (let ((cols (transpose n)))
    (map (lambda (row) (matrix-*-vector cols row)) m)))

(define matrix-*-matrix matrix-*-matrix-v2)

(define (main-ex-2-37)
  (define v (list 1 2 3))
  (define w (list 2 3 4))
  (define m (list (list 0 1 2) (list 3 4 5)))
  (define n (list (list 0 1 2) (list 1 2 1) (list 3 0 1)))
  (display "v=")
  (display v)
  (newline)
  (display "w=")
  (display w)
  (newline)
  (display "m=")
  (display m)
  (newline)
  (display "n=")
  (display n)
  (newline)
  (display "(dot-product v w)=")
  (display (dot-product v w))
  (newline)
  (display "(matrix-*-vector m v)=")
  (display (matrix-*-vector m v))
  (newline)
  (display "(matrix-*-vector m w)=")
  (display (matrix-*-vector m w))
  (newline)
  (display "(matrix-*-vector n v)=")
  (display (matrix-*-vector n v))
  (newline)
  (display "(matrix-*-vector n w)=")
  (display (matrix-*-vector n w))
  (newline)
  (display "(transpose m)=")
  (display (transpose m))
  (newline)
  (display "(matrix-*-matrix m n)=")
  (display (matrix-*-matrix m n))
  (newline)
)
